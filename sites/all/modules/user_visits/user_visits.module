<?php

/**
 * User visits
 * 
 * @author
 * Valentin Ursuleac <ursuleacv@gmail.com>
 */

// Init
function user_visits_init(){
  drupal_add_js('sites/all/modules/user_visits/media/jquery.dataTables.min.js');
  drupal_add_js(drupal_get_path('module', 'user_visits').'/media/datatables.js', 'module','footer' );
  drupal_add_css(drupal_get_path('module', 'user_visits') .'/media/jquery.dataTables.css');
}

/**
 * Implementation of hook_help();
 */
function user_visits_help($path, $arg) {
  switch ($path) {
    case "admin/help#user-visits":
      return t("<p>Counts the pages visited.</p>");
      break;
  }
}

/**
 * Implementation of hook_menu();
 */
function user_visits_menu() {
  global $user;

  $items['admin/user/user_visits'] = array(
    'title' => 'User visits',
    'description' => "Configure where to display a user's visitors.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_visits_settings'),
    'access arguments' => array('administer user visits'),
    'file' => 'user_visits.admin.inc',
  );
  
  return $items;
}

/**
 * Implementation of hook_block().
 */
function user_visits_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Latest visitors'),
    );
    $blocks[1] = array(
      'info' => t('My latest visitors'),
    );
    return $blocks;
  }
  else if ($op == 'configure') {
    $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('user_visits_block_items_'. $delta, 5),
      '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25)),
    );
    return $form;
  }
  else if ($op == 'save') {
    variable_set('user_visits_block_items_'. $delta, $edit['items']);
  }
  else if ($op == 'view') {
    $limit = variable_get('user_visits_block_items_'. $delta, 5);
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => t('Latest visitors'),
          'content' => user_visits_display_block_1(NULL, $limit),
          );
        break;
      case 1:
        global $user;
        $block = array(
          'subject' => t('My latest visitors'),
          'content' => user_visits_display_block_1($user->uid, $limit),
          );
        break;
    }
    return $block;
  }
}

/**
 * Get latest visitors for block content
 */
function user_visits_display_block_1($uid = NULL, $limit = NULL) {
  if (!$uid && (arg(0) == 'user' && is_numeric(arg(1)))) {
    $uid = arg(1);
  }
  if ($uid) {
    $visitors = user_visits_latest($uid, $limit);
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $account = user_load(array('uid' => $visitor->vuid));
         $output .= theme('user_visits', $user_account, $visitor->visit, $visitor->vpath, $visitor->referer);
      }
    }
    $output .= theme('user_visits_total', user_visits_total($uid));
  }
  return $output;
}

/**
 * Implementation of hook_perm();
 */
function user_visits_perm() {
  return array('administer user visits');
}

/**
 * Implementation of hook_user();
 */
function user_visits_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'view':
      //Display visitors on the user's profile
      global $user;
      $uid = $user->uid;
      if ($uid !=1) return;
      //if (variable_get('user_visits_display', 0)) {
        $visitors = user_visits_latest();
        if (is_array($visitors)) {
          $output.= '<table id="datatables"><thead><tr><th>Username</th><th>Nodetype</th><th>Path</th><th>Query</th><th>Created</th></tr></thead>';
          foreach ($visitors as $visitor) {
            $user_account = user_load(array('uid' => $visitor->uid));
            $output .= theme('user_visits', $user_account, $visitor->nodetype, $visitor->vpath, $visitor->query, $visitor->created, $visitor->referer);
          }
          $output.='</table>';
        }
        
        $account->content['summary']['user_visits'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Latest visitors'),
          '#value' => $output ? $output : t('No visits by now'),
          '#weight' => 10,
          '#attributes' => array('class' => 'user-visits'),
        );
      //}
      break;
    case 'delete':
      db_query("DELETE FROM {user_visits} WHERE uid=%d", $account->uid);
      break;
  }
  
}

/**
 * Update counter
 */
function user_visits_count($uid, $nodetype, $nid, $vpath, $query) {
  //db_query("DELETE FROM {user_visits} WHERE uid=%d, $uid", $uid);
  return db_query("INSERT INTO {user_visits} (uid, nodetype, nid, vpath,query, created, referer) VALUES (%d, '%s', '%s', '%s', '%s', '%d','%s')", $uid, $nodetype, $nid, $vpath, $query, time(), referer_uri());
}
// function user_visits_count($vuid, $uid) {
//   db_query("DELETE FROM {user_visits} WHERE uid=%d AND vuid=%d", $uid, $vuid);
//   return db_query("INSERT INTO {user_visits} (uid, vuid, visit, referer) VALUES (%d, %d, %d, '%s')", $uid, $vuid, time(), referer_uri());
// } 

/**
 * Get the total of visits
 */
function user_visits_total($uid) {
  return db_result(db_query("SELECT COUNT(visit) AS count FROM {user_visits} WHERE uid=%d", $uid));
}

/**
 * Get the latest visits
 */
function user_visits_latest( /* $limit = 10 */) {
  //$result = db_query("SELECT * FROM {user_visits} ORDER BY created DESC LIMIT %d", $limit);
  $result = db_query("SELECT * FROM {user_visits} ORDER BY created DESC");
  while ($visitor = db_fetch_object($result)) {
    $visitors[] = $visitor;
  }
  return $visitors;
}

/**
 * Check if user should be counted
 */
function user_visit_is_hidden($user) {
  $intersect = array_intersect_key($user->roles, variable_get('user_visits_hidden_roles', array()));
  return count($intersect) ? TRUE : FALSE;
}

/**
 * Implementation of hook_exit().
 */
function user_visits_exit() {
  global $user;

  $uid = 0; $nodetype=''; $nid=''; $vpath=''; $query='';
  $referer = referer_uri();
  $i = 0; 
  $uid = $user->uid;
  
  //node id
  if (arg(0) == 'node' && is_numeric(arg(1))) $nid = arg(1);

  //node type
  $node = node_load($nid);
  $types = node_get_types();
  $human_readable = $types[$node->type]->name;
  $nodetype = $human_readable;
  
  $vpath = $_GET['q'];
  
  $query = parse_url(referer_uri());
  $query = $query['query'];
  $pos = strpos($query, '&');
  $query = substr($query, $pos+1);
  
  user_visits_count($uid, $nodetype, $nid, $vpath, $query);
}

/**
 * Implementation of hook_theme().
 */
function user_visits_theme($existing, $type, $theme, $path) {
  return array(
    'user_visits' => array(
      'arguments' => array(
        'account'   => NULL,
        'nodetype'   => NULL,
        'vpath' => NULL,
        'created' => NULL,
        'referer'   => NULL,
      ),
    ),
    'user_visits_total' => array(
      'arguments' => array(
        'total'   => NULL,
      ),
    ),
  );
}

/**
 * Themeable function
 */
function theme_user_visits($account, $nodetype, $vpath, $query,$created, $referer = NULL) {
  $output  = '<tr>';
  $output .= theme('user_picture', $account);
  $output .= ' <td>'. theme('username', $account) .'</td>';
  $output .= ' <td>'. $nodetype .'</td>';
  $output .= ' <td>'. t('!link', array('!link' => l(substr($vpath, 0,30), $vpath))) .'</td>';
  $output .= ' <td>'. $query .'</td>';
  if ($created) {
    $output .= $created ? ' <td>'. t('!time ago', array('!time' => format_interval(time() - $created))) .'</td>' : '';
    // $output .= $referer ? ' <td>'. t('!link', array('!link' => l($referer, $referer))) .'</td>'."\n" : '';
  } 
  $output .= '</tr>';
  return $output;
}

/**
 * Themeable function
 */
function theme_user_visits_total($total = 0) {
  $output = '<div class="user_visits_total">'. t('Total visits %total', array('%total' => $total)) .'</div>';
  return $output;
}
